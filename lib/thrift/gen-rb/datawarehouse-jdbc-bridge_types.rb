#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module SecretType
  PASSWORD = 0
  SST = 1
  VALUE_MAP = {0 => "PASSWORD", 1 => "SST"}
  VALID_VALUES = Set.new([PASSWORD, SST]).freeze
end

module ExecuteMethodType
  EXECUTE = 0
  QUERY = 1
  UPDATE = 2
  VALUE_MAP = {0 => "EXECUTE", 1 => "QUERY", 2 => "UPDATE"}
  VALID_VALUES = Set.new([EXECUTE, QUERY, UPDATE]).freeze
end

module ResourceType
  STATEMENT = 0
  RESULT_SET = 1
  VALUE_MAP = {0 => "STATEMENT", 1 => "RESULT_SET"}
  VALID_VALUES = Set.new([STATEMENT, RESULT_SET]).freeze
end

module MetadataResultSetMethod
  GET_PROCEDURES = 0
  GET_PROCEDURE_COLUMNS = 1
  GET_TABLES = 2
  GET_SCHEMAS = 3
  GET_CATALOGS = 4
  GET_TABLE_TYPES = 5
  GET_COLUMNS = 6
  GET_COLUMN_PRIVILEGES = 7
  GET_TABLE_PRIVILEGES = 8
  GET_BEST_ROW_IDENTIFIER = 9
  GET_VERSION_COLUMNS = 10
  GET_PRIMARY_KEYS = 11
  GET_IMPORTED_KEYS = 12
  GET_EXPORTED_KEYS = 13
  GET_CROSS_REFERENCE = 14
  GET_TYPE_INFO = 15
  GET_INDEX_INFO = 16
  GET_UDTS = 17
  GET_SUPER_TYPES = 18
  GET_SUPER_TABLES = 19
  GET_ATTRIBUTES = 20
  GET_CLIENT_INFO_PROPERTIES = 21
  GET_FUNCTIONS = 22
  GET_FUNCTION_COLUMNS = 23
  GET_PSEUDO_COLUMNS = 24
  VALUE_MAP = {0 => "GET_PROCEDURES", 1 => "GET_PROCEDURE_COLUMNS", 2 => "GET_TABLES", 3 => "GET_SCHEMAS", 4 => "GET_CATALOGS", 5 => "GET_TABLE_TYPES", 6 => "GET_COLUMNS", 7 => "GET_COLUMN_PRIVILEGES", 8 => "GET_TABLE_PRIVILEGES", 9 => "GET_BEST_ROW_IDENTIFIER", 10 => "GET_VERSION_COLUMNS", 11 => "GET_PRIMARY_KEYS", 12 => "GET_IMPORTED_KEYS", 13 => "GET_EXPORTED_KEYS", 14 => "GET_CROSS_REFERENCE", 15 => "GET_TYPE_INFO", 16 => "GET_INDEX_INFO", 17 => "GET_UDTS", 18 => "GET_SUPER_TYPES", 19 => "GET_SUPER_TABLES", 20 => "GET_ATTRIBUTES", 21 => "GET_CLIENT_INFO_PROPERTIES", 22 => "GET_FUNCTIONS", 23 => "GET_FUNCTION_COLUMNS", 24 => "GET_PSEUDO_COLUMNS"}
  VALID_VALUES = Set.new([GET_PROCEDURES, GET_PROCEDURE_COLUMNS, GET_TABLES, GET_SCHEMAS, GET_CATALOGS, GET_TABLE_TYPES, GET_COLUMNS, GET_COLUMN_PRIVILEGES, GET_TABLE_PRIVILEGES, GET_BEST_ROW_IDENTIFIER, GET_VERSION_COLUMNS, GET_PRIMARY_KEYS, GET_IMPORTED_KEYS, GET_EXPORTED_KEYS, GET_CROSS_REFERENCE, GET_TYPE_INFO, GET_INDEX_INFO, GET_UDTS, GET_SUPER_TYPES, GET_SUPER_TABLES, GET_ATTRIBUTES, GET_CLIENT_INFO_PROPERTIES, GET_FUNCTIONS, GET_FUNCTION_COLUMNS, GET_PSEUDO_COLUMNS]).freeze
end

module MetadataSimpleMethod
  ALL_PROCEDURES_ARE_CALLABLE = 0
  ALL_TABLES_ARE_SELECTABLE = 1
  GET_USER_NAME = 2
  IS_READ_ONLY = 3
  NULLS_ARE_SORTED_HIGH = 4
  NULLS_ARE_SORTED_LOW = 5
  NULLS_ARE_SORTED_AT_START = 6
  NULLS_ARE_SORTED_AT_END = 7
  USES_LOCAL_FILES = 8
  USES_LOCAL_FILE_PER_TABLE = 9
  SUPPORTS_MIXED_CASE_IDENTIFIERS = 10
  STORES_UPPER_CASE_IDENTIFIERS = 11
  STORES_LOWER_CASE_IDENTIFIERS = 12
  STORES_MIXED_CASE_IDENTIFIERS = 13
  SUPPORTS_MIXED_CASE_QUOTED_IDENTIFIERS = 14
  STORES_UPPER_CASE_QUOTED_IDENTIFIERS = 15
  STORES_LOWER_CASE_QUOTED_IDENTIFIERS = 16
  STORES_MIXED_CASE_QUOTED_IDENTIFIERS = 17
  GET_IDENTIFIER_QUOTE_STRING = 18
  GET_SQL_KEYWORDS = 19
  GET_NUMERIC_FUNCTIONS = 20
  GET_STRING_FUNCTIONS = 21
  GET_SYSTEM_FUNCTIONS = 22
  GET_TIME_DATE_FUNCTIONS = 23
  GET_SEARCH_STRING_ESCAPE = 24
  GET_EXTRA_NAME_CHARACTERS = 25
  SUPPORTS_ALTER_TABLE_WITH_ADD_COLUMN = 26
  SUPPORTS_ALTER_TABLE_WITH_DROP_COLUMN = 27
  SUPPORTS_COLUMN_ALIASING = 28
  NULL_PLUS_NON_NULL_IS_NULL = 29
  SUPPORTS_CONVERT = 30
  SUPPORTS_TABLE_CORRELATION_NAMES = 31
  SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES = 32
  SUPPORTS_EXPRESSIONS_IN_ORDER_BY = 33
  SUPPORTS_ORDER_BY_UNRELATED = 34
  SUPPORTS_GROUP_BY = 35
  SUPPORTS_GROUP_BY_UNRELATED = 36
  SUPPORTS_GROUP_BY_BEYOND_SELECT = 37
  SUPPORTS_LIKE_ESCAPE_CLAUSE = 38
  SUPPORTS_MULTIPLE_RESULT_SETS = 39
  SUPPORTS_MULTIPLE_TRANSACTIONS = 40
  SUPPORTS_NON_NULLABLE_COLUMNS = 41
  SUPPORTS_MINIMUM_SQL_GRAMMAR = 42
  SUPPORTS_CORE_SQL_GRAMMAR = 43
  SUPPORTS_EXTENDED_SQL_GRAMMAR = 44
  SUPPORTS_ANSI92_ENTRY_LEVEL_SQL = 45
  SUPPORTS_ANSI92_INTERMEDIATE_SQL = 46
  SUPPORTS_ANSI92_FULL_SQL = 47
  SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY = 48
  SUPPORTS_OUTER_JOINS = 49
  SUPPORTS_FULL_OUTER_JOINS = 50
  SUPPORTS_LIMITED_OUTER_JOINS = 51
  GET_SCHEMA_TERM = 52
  GET_PROCEDURE_TERM = 53
  GET_CATALOG_TERM = 54
  IS_CATALOG_AT_START = 55
  GET_CATALOG_SEPARATOR = 56
  SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION = 57
  SUPPORTS_SCHEMAS_IN_PROCEDURE_CALLS = 58
  SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS = 59
  SUPPORTS_SCHEMAS_IN_INDEX_DEFINITIONS = 60
  SUPPORTS_SCHEMAS_IN_PRIVILEGE_DEFINITIONS = 61
  SUPPORTS_CATALOGS_IN_DATA_MANIPULATION = 62
  SUPPORTS_CATALOGS_IN_PROCEDURE_CALLS = 63
  SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS = 64
  SUPPORTS_CATALOGS_IN_INDEX_DEFINITIONS = 65
  SUPPORTS_CATALOGS_IN_PRIVILEGE_DEFINITIONS = 66
  SUPPORTS_POSITIONED_DELETE = 67
  SUPPORTS_POSITIONED_UPDATE = 68
  SUPPORTS_SELECT_FOR_UPDATE = 69
  SUPPORTS_STORED_PROCEDURES = 70
  SUPPORTS_SUBQUERIES_IN_COMPARISONS = 71
  SUPPORTS_SUBQUERIES_IN_EXISTS = 72
  SUPPORTS_SUBQUERIES_IN_INS = 73
  SUPPORTS_SUBQUERIES_IN_QUANTIFIEDS = 74
  SUPPORTS_CORRELATED_SUBQUERIES = 75
  SUPPORTS_UNION = 76
  SUPPORTS_UNION_ALL = 77
  SUPPORTS_OPEN_CURSORS_ACROSS_COMMIT = 78
  SUPPORTS_OPEN_CURSORS_ACROSS_ROLLBACK = 79
  SUPPORTS_OPEN_STATEMENTS_ACROSS_COMMIT = 80
  SUPPORTS_OPEN_STATEMENTS_ACROSS_ROLLBACK = 81
  GET_MAX_BINARY_LITERAL_LENGTH = 82
  GET_MAX_CHAR_LITERAL_LENGTH = 83
  GET_MAX_COLUMN_NAME_LENGTH = 84
  GET_MAX_COLUMNS_IN_GROUP_BY = 85
  GET_MAX_COLUMNS_IN_INDEX = 86
  GET_MAX_COLUMNS_IN_ORDER_BY = 87
  GET_MAX_COLUMNS_IN_SELECT = 88
  GET_MAX_COLUMNS_IN_TABLE = 89
  GET_MAX_CONNECTIONS = 90
  GET_MAX_CURSOR_NAME_LENGTH = 91
  GET_MAX_INDEX_LENGTH = 92
  GET_MAX_SCHEMA_NAME_LENGTH = 93
  GET_MAX_PROCEDURE_NAME_LENGTH = 94
  GET_MAX_CATALOG_NAME_LENGTH = 95
  GET_MAX_ROW_SIZE = 96
  DOES_MAX_ROW_SIZE_INCLUDE_BLOBS = 97
  GET_MAX_STATEMENT_LENGTH = 98
  GET_MAX_STATEMENTS = 99
  GET_MAX_TABLE_NAME_LENGTH = 100
  GET_MAX_TABLES_IN_SELECT = 101
  GET_MAX_USER_NAME_LENGTH = 102
  GET_DEFAULT_TRANSACTION_ISOLATION = 103
  SUPPORTS_TRANSACTIONS = 104
  SUPPORTS_TRANSACTION_ISOLATION_LEVEL = 105
  SUPPORTS_DATA_DEFINITION_AND_DATA_MANIPULATION_TRANSACTIONS = 106
  SUPPORTS_DATA_MANIPULATION_TRANSACTIONS_ONLY = 107
  DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT = 108
  DATA_DEFINITION_IGNORED_IN_TRANSACTIONS = 109
  SUPPORTS_RESULT_SET_TYPE = 110
  SUPPORTS_RESULT_SET_CONCURRENCY = 111
  OWN_UPDATES_ARE_VISIBLE = 112
  OWN_DELETES_ARE_VISIBLE = 113
  OWN_INSERTS_ARE_VISIBLE = 114
  OTHERS_UPDATES_ARE_VISIBLE = 115
  OTHERS_DELETES_ARE_VISIBLE = 116
  OTHERS_INSERTS_ARE_VISIBLE = 117
  UPDATES_ARE_DETECTED = 118
  DELETES_ARE_DETECTED = 119
  INSERTS_ARE_DETECTED = 120
  SUPPORTS_BATCH_UPDATES = 121
  SUPPORTS_SAVEPOINTS = 122
  SUPPORTS_NAMED_PARAMETERS = 123
  SUPPORTS_MULTIPLE_OPEN_RESULTS = 124
  SUPPORTS_GET_GENERATED_KEYS = 125
  SUPPORTS_RESULT_SET_HOLDABILITY = 126
  GET_RESULT_SET_HOLDABILITY = 127
  GET_SQL_STATE_TYPE = 128
  LOCATORS_UPDATE_COPY = 129
  SUPPORTS_STATEMENT_POOLING = 130
  GET_DATABASE_MAJOR_VERSION = 131
  GET_DATABASE_MINOR_VERSION = 132
  GET_DATABASE_PRODUCT_NAME = 133
  GET_DATABASE_PRODUCT_VERSION = 134
  VALUE_MAP = {0 => "ALL_PROCEDURES_ARE_CALLABLE", 1 => "ALL_TABLES_ARE_SELECTABLE", 2 => "GET_USER_NAME", 3 => "IS_READ_ONLY", 4 => "NULLS_ARE_SORTED_HIGH", 5 => "NULLS_ARE_SORTED_LOW", 6 => "NULLS_ARE_SORTED_AT_START", 7 => "NULLS_ARE_SORTED_AT_END", 8 => "USES_LOCAL_FILES", 9 => "USES_LOCAL_FILE_PER_TABLE", 10 => "SUPPORTS_MIXED_CASE_IDENTIFIERS", 11 => "STORES_UPPER_CASE_IDENTIFIERS", 12 => "STORES_LOWER_CASE_IDENTIFIERS", 13 => "STORES_MIXED_CASE_IDENTIFIERS", 14 => "SUPPORTS_MIXED_CASE_QUOTED_IDENTIFIERS", 15 => "STORES_UPPER_CASE_QUOTED_IDENTIFIERS", 16 => "STORES_LOWER_CASE_QUOTED_IDENTIFIERS", 17 => "STORES_MIXED_CASE_QUOTED_IDENTIFIERS", 18 => "GET_IDENTIFIER_QUOTE_STRING", 19 => "GET_SQL_KEYWORDS", 20 => "GET_NUMERIC_FUNCTIONS", 21 => "GET_STRING_FUNCTIONS", 22 => "GET_SYSTEM_FUNCTIONS", 23 => "GET_TIME_DATE_FUNCTIONS", 24 => "GET_SEARCH_STRING_ESCAPE", 25 => "GET_EXTRA_NAME_CHARACTERS", 26 => "SUPPORTS_ALTER_TABLE_WITH_ADD_COLUMN", 27 => "SUPPORTS_ALTER_TABLE_WITH_DROP_COLUMN", 28 => "SUPPORTS_COLUMN_ALIASING", 29 => "NULL_PLUS_NON_NULL_IS_NULL", 30 => "SUPPORTS_CONVERT", 31 => "SUPPORTS_TABLE_CORRELATION_NAMES", 32 => "SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES", 33 => "SUPPORTS_EXPRESSIONS_IN_ORDER_BY", 34 => "SUPPORTS_ORDER_BY_UNRELATED", 35 => "SUPPORTS_GROUP_BY", 36 => "SUPPORTS_GROUP_BY_UNRELATED", 37 => "SUPPORTS_GROUP_BY_BEYOND_SELECT", 38 => "SUPPORTS_LIKE_ESCAPE_CLAUSE", 39 => "SUPPORTS_MULTIPLE_RESULT_SETS", 40 => "SUPPORTS_MULTIPLE_TRANSACTIONS", 41 => "SUPPORTS_NON_NULLABLE_COLUMNS", 42 => "SUPPORTS_MINIMUM_SQL_GRAMMAR", 43 => "SUPPORTS_CORE_SQL_GRAMMAR", 44 => "SUPPORTS_EXTENDED_SQL_GRAMMAR", 45 => "SUPPORTS_ANSI92_ENTRY_LEVEL_SQL", 46 => "SUPPORTS_ANSI92_INTERMEDIATE_SQL", 47 => "SUPPORTS_ANSI92_FULL_SQL", 48 => "SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY", 49 => "SUPPORTS_OUTER_JOINS", 50 => "SUPPORTS_FULL_OUTER_JOINS", 51 => "SUPPORTS_LIMITED_OUTER_JOINS", 52 => "GET_SCHEMA_TERM", 53 => "GET_PROCEDURE_TERM", 54 => "GET_CATALOG_TERM", 55 => "IS_CATALOG_AT_START", 56 => "GET_CATALOG_SEPARATOR", 57 => "SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION", 58 => "SUPPORTS_SCHEMAS_IN_PROCEDURE_CALLS", 59 => "SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS", 60 => "SUPPORTS_SCHEMAS_IN_INDEX_DEFINITIONS", 61 => "SUPPORTS_SCHEMAS_IN_PRIVILEGE_DEFINITIONS", 62 => "SUPPORTS_CATALOGS_IN_DATA_MANIPULATION", 63 => "SUPPORTS_CATALOGS_IN_PROCEDURE_CALLS", 64 => "SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS", 65 => "SUPPORTS_CATALOGS_IN_INDEX_DEFINITIONS", 66 => "SUPPORTS_CATALOGS_IN_PRIVILEGE_DEFINITIONS", 67 => "SUPPORTS_POSITIONED_DELETE", 68 => "SUPPORTS_POSITIONED_UPDATE", 69 => "SUPPORTS_SELECT_FOR_UPDATE", 70 => "SUPPORTS_STORED_PROCEDURES", 71 => "SUPPORTS_SUBQUERIES_IN_COMPARISONS", 72 => "SUPPORTS_SUBQUERIES_IN_EXISTS", 73 => "SUPPORTS_SUBQUERIES_IN_INS", 74 => "SUPPORTS_SUBQUERIES_IN_QUANTIFIEDS", 75 => "SUPPORTS_CORRELATED_SUBQUERIES", 76 => "SUPPORTS_UNION", 77 => "SUPPORTS_UNION_ALL", 78 => "SUPPORTS_OPEN_CURSORS_ACROSS_COMMIT", 79 => "SUPPORTS_OPEN_CURSORS_ACROSS_ROLLBACK", 80 => "SUPPORTS_OPEN_STATEMENTS_ACROSS_COMMIT", 81 => "SUPPORTS_OPEN_STATEMENTS_ACROSS_ROLLBACK", 82 => "GET_MAX_BINARY_LITERAL_LENGTH", 83 => "GET_MAX_CHAR_LITERAL_LENGTH", 84 => "GET_MAX_COLUMN_NAME_LENGTH", 85 => "GET_MAX_COLUMNS_IN_GROUP_BY", 86 => "GET_MAX_COLUMNS_IN_INDEX", 87 => "GET_MAX_COLUMNS_IN_ORDER_BY", 88 => "GET_MAX_COLUMNS_IN_SELECT", 89 => "GET_MAX_COLUMNS_IN_TABLE", 90 => "GET_MAX_CONNECTIONS", 91 => "GET_MAX_CURSOR_NAME_LENGTH", 92 => "GET_MAX_INDEX_LENGTH", 93 => "GET_MAX_SCHEMA_NAME_LENGTH", 94 => "GET_MAX_PROCEDURE_NAME_LENGTH", 95 => "GET_MAX_CATALOG_NAME_LENGTH", 96 => "GET_MAX_ROW_SIZE", 97 => "DOES_MAX_ROW_SIZE_INCLUDE_BLOBS", 98 => "GET_MAX_STATEMENT_LENGTH", 99 => "GET_MAX_STATEMENTS", 100 => "GET_MAX_TABLE_NAME_LENGTH", 101 => "GET_MAX_TABLES_IN_SELECT", 102 => "GET_MAX_USER_NAME_LENGTH", 103 => "GET_DEFAULT_TRANSACTION_ISOLATION", 104 => "SUPPORTS_TRANSACTIONS", 105 => "SUPPORTS_TRANSACTION_ISOLATION_LEVEL", 106 => "SUPPORTS_DATA_DEFINITION_AND_DATA_MANIPULATION_TRANSACTIONS", 107 => "SUPPORTS_DATA_MANIPULATION_TRANSACTIONS_ONLY", 108 => "DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT", 109 => "DATA_DEFINITION_IGNORED_IN_TRANSACTIONS", 110 => "SUPPORTS_RESULT_SET_TYPE", 111 => "SUPPORTS_RESULT_SET_CONCURRENCY", 112 => "OWN_UPDATES_ARE_VISIBLE", 113 => "OWN_DELETES_ARE_VISIBLE", 114 => "OWN_INSERTS_ARE_VISIBLE", 115 => "OTHERS_UPDATES_ARE_VISIBLE", 116 => "OTHERS_DELETES_ARE_VISIBLE", 117 => "OTHERS_INSERTS_ARE_VISIBLE", 118 => "UPDATES_ARE_DETECTED", 119 => "DELETES_ARE_DETECTED", 120 => "INSERTS_ARE_DETECTED", 121 => "SUPPORTS_BATCH_UPDATES", 122 => "SUPPORTS_SAVEPOINTS", 123 => "SUPPORTS_NAMED_PARAMETERS", 124 => "SUPPORTS_MULTIPLE_OPEN_RESULTS", 125 => "SUPPORTS_GET_GENERATED_KEYS", 126 => "SUPPORTS_RESULT_SET_HOLDABILITY", 127 => "GET_RESULT_SET_HOLDABILITY", 128 => "GET_SQL_STATE_TYPE", 129 => "LOCATORS_UPDATE_COPY", 130 => "SUPPORTS_STATEMENT_POOLING", 131 => "GET_DATABASE_MAJOR_VERSION", 132 => "GET_DATABASE_MINOR_VERSION", 133 => "GET_DATABASE_PRODUCT_NAME", 134 => "GET_DATABASE_PRODUCT_VERSION"}
  VALID_VALUES = Set.new([ALL_PROCEDURES_ARE_CALLABLE, ALL_TABLES_ARE_SELECTABLE, GET_USER_NAME, IS_READ_ONLY, NULLS_ARE_SORTED_HIGH, NULLS_ARE_SORTED_LOW, NULLS_ARE_SORTED_AT_START, NULLS_ARE_SORTED_AT_END, USES_LOCAL_FILES, USES_LOCAL_FILE_PER_TABLE, SUPPORTS_MIXED_CASE_IDENTIFIERS, STORES_UPPER_CASE_IDENTIFIERS, STORES_LOWER_CASE_IDENTIFIERS, STORES_MIXED_CASE_IDENTIFIERS, SUPPORTS_MIXED_CASE_QUOTED_IDENTIFIERS, STORES_UPPER_CASE_QUOTED_IDENTIFIERS, STORES_LOWER_CASE_QUOTED_IDENTIFIERS, STORES_MIXED_CASE_QUOTED_IDENTIFIERS, GET_IDENTIFIER_QUOTE_STRING, GET_SQL_KEYWORDS, GET_NUMERIC_FUNCTIONS, GET_STRING_FUNCTIONS, GET_SYSTEM_FUNCTIONS, GET_TIME_DATE_FUNCTIONS, GET_SEARCH_STRING_ESCAPE, GET_EXTRA_NAME_CHARACTERS, SUPPORTS_ALTER_TABLE_WITH_ADD_COLUMN, SUPPORTS_ALTER_TABLE_WITH_DROP_COLUMN, SUPPORTS_COLUMN_ALIASING, NULL_PLUS_NON_NULL_IS_NULL, SUPPORTS_CONVERT, SUPPORTS_TABLE_CORRELATION_NAMES, SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES, SUPPORTS_EXPRESSIONS_IN_ORDER_BY, SUPPORTS_ORDER_BY_UNRELATED, SUPPORTS_GROUP_BY, SUPPORTS_GROUP_BY_UNRELATED, SUPPORTS_GROUP_BY_BEYOND_SELECT, SUPPORTS_LIKE_ESCAPE_CLAUSE, SUPPORTS_MULTIPLE_RESULT_SETS, SUPPORTS_MULTIPLE_TRANSACTIONS, SUPPORTS_NON_NULLABLE_COLUMNS, SUPPORTS_MINIMUM_SQL_GRAMMAR, SUPPORTS_CORE_SQL_GRAMMAR, SUPPORTS_EXTENDED_SQL_GRAMMAR, SUPPORTS_ANSI92_ENTRY_LEVEL_SQL, SUPPORTS_ANSI92_INTERMEDIATE_SQL, SUPPORTS_ANSI92_FULL_SQL, SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY, SUPPORTS_OUTER_JOINS, SUPPORTS_FULL_OUTER_JOINS, SUPPORTS_LIMITED_OUTER_JOINS, GET_SCHEMA_TERM, GET_PROCEDURE_TERM, GET_CATALOG_TERM, IS_CATALOG_AT_START, GET_CATALOG_SEPARATOR, SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION, SUPPORTS_SCHEMAS_IN_PROCEDURE_CALLS, SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS, SUPPORTS_SCHEMAS_IN_INDEX_DEFINITIONS, SUPPORTS_SCHEMAS_IN_PRIVILEGE_DEFINITIONS, SUPPORTS_CATALOGS_IN_DATA_MANIPULATION, SUPPORTS_CATALOGS_IN_PROCEDURE_CALLS, SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS, SUPPORTS_CATALOGS_IN_INDEX_DEFINITIONS, SUPPORTS_CATALOGS_IN_PRIVILEGE_DEFINITIONS, SUPPORTS_POSITIONED_DELETE, SUPPORTS_POSITIONED_UPDATE, SUPPORTS_SELECT_FOR_UPDATE, SUPPORTS_STORED_PROCEDURES, SUPPORTS_SUBQUERIES_IN_COMPARISONS, SUPPORTS_SUBQUERIES_IN_EXISTS, SUPPORTS_SUBQUERIES_IN_INS, SUPPORTS_SUBQUERIES_IN_QUANTIFIEDS, SUPPORTS_CORRELATED_SUBQUERIES, SUPPORTS_UNION, SUPPORTS_UNION_ALL, SUPPORTS_OPEN_CURSORS_ACROSS_COMMIT, SUPPORTS_OPEN_CURSORS_ACROSS_ROLLBACK, SUPPORTS_OPEN_STATEMENTS_ACROSS_COMMIT, SUPPORTS_OPEN_STATEMENTS_ACROSS_ROLLBACK, GET_MAX_BINARY_LITERAL_LENGTH, GET_MAX_CHAR_LITERAL_LENGTH, GET_MAX_COLUMN_NAME_LENGTH, GET_MAX_COLUMNS_IN_GROUP_BY, GET_MAX_COLUMNS_IN_INDEX, GET_MAX_COLUMNS_IN_ORDER_BY, GET_MAX_COLUMNS_IN_SELECT, GET_MAX_COLUMNS_IN_TABLE, GET_MAX_CONNECTIONS, GET_MAX_CURSOR_NAME_LENGTH, GET_MAX_INDEX_LENGTH, GET_MAX_SCHEMA_NAME_LENGTH, GET_MAX_PROCEDURE_NAME_LENGTH, GET_MAX_CATALOG_NAME_LENGTH, GET_MAX_ROW_SIZE, DOES_MAX_ROW_SIZE_INCLUDE_BLOBS, GET_MAX_STATEMENT_LENGTH, GET_MAX_STATEMENTS, GET_MAX_TABLE_NAME_LENGTH, GET_MAX_TABLES_IN_SELECT, GET_MAX_USER_NAME_LENGTH, GET_DEFAULT_TRANSACTION_ISOLATION, SUPPORTS_TRANSACTIONS, SUPPORTS_TRANSACTION_ISOLATION_LEVEL, SUPPORTS_DATA_DEFINITION_AND_DATA_MANIPULATION_TRANSACTIONS, SUPPORTS_DATA_MANIPULATION_TRANSACTIONS_ONLY, DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT, DATA_DEFINITION_IGNORED_IN_TRANSACTIONS, SUPPORTS_RESULT_SET_TYPE, SUPPORTS_RESULT_SET_CONCURRENCY, OWN_UPDATES_ARE_VISIBLE, OWN_DELETES_ARE_VISIBLE, OWN_INSERTS_ARE_VISIBLE, OTHERS_UPDATES_ARE_VISIBLE, OTHERS_DELETES_ARE_VISIBLE, OTHERS_INSERTS_ARE_VISIBLE, UPDATES_ARE_DETECTED, DELETES_ARE_DETECTED, INSERTS_ARE_DETECTED, SUPPORTS_BATCH_UPDATES, SUPPORTS_SAVEPOINTS, SUPPORTS_NAMED_PARAMETERS, SUPPORTS_MULTIPLE_OPEN_RESULTS, SUPPORTS_GET_GENERATED_KEYS, SUPPORTS_RESULT_SET_HOLDABILITY, GET_RESULT_SET_HOLDABILITY, GET_SQL_STATE_TYPE, LOCATORS_UPDATE_COPY, SUPPORTS_STATEMENT_POOLING, GET_DATABASE_MAJOR_VERSION, GET_DATABASE_MINOR_VERSION, GET_DATABASE_PRODUCT_NAME, GET_DATABASE_PRODUCT_VERSION]).freeze
end

module ConnectionParameter
  READ_ONLY = 0
  TRANSACTION_ISOLATION = 1
  AUTO_COMMIT = 2
  CATALOG = 3
  VALUE_MAP = {0 => "READ_ONLY", 1 => "TRANSACTION_ISOLATION", 2 => "AUTO_COMMIT", 3 => "CATALOG"}
  VALID_VALUES = Set.new([READ_ONLY, TRANSACTION_ISOLATION, AUTO_COMMIT, CATALOG]).freeze
end

# Proxy exception that can be thrown from proxy server. Defines unique identifiers that enables matching client
# exceptions to server ones.
# 
class ProxyException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONNECTIONID = 1
  EXCEPTIONID = 2
  MESSAGE = 3

  FIELDS = {
    CONNECTIONID => {:type => ::Thrift::Types::STRING, :name => 'connectionId'},
    EXCEPTIONID => {:type => ::Thrift::Types::STRING, :name => 'exceptionId'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Proxy SQL exception that can be thrown from proxy server. Defines unique identifiers that enables matching client
# exceptions to server ones.
# 
class ProxySqlException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONNECTIONID = 1
  EXCEPTIONID = 2
  MESSAGE = 3
  ERRORCODE = 4
  SQLSTATE = 5

  FIELDS = {
    CONNECTIONID => {:type => ::Thrift::Types::STRING, :name => 'connectionId'},
    EXCEPTIONID => {:type => ::Thrift::Types::STRING, :name => 'exceptionId'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
    ERRORCODE => {:type => ::Thrift::Types::I32, :name => 'errorCode'},
    SQLSTATE => {:type => ::Thrift::Types::STRING, :name => 'sqlState'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# ADS SQL exception thrown from proxy server whether client offered protocol versions which are not acceptable by server.
# 
class UnsupportedClientException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONNECTIONID = 1
  EXCEPTIONID = 2
  MESSAGE = 3

  FIELDS = {
    CONNECTIONID => {:type => ::Thrift::Types::STRING, :name => 'connectionId'},
    EXCEPTIONID => {:type => ::Thrift::Types::STRING, :name => 'exceptionId'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Auth options as an argument for the auth() method. Mainly client info and client supported protocol versions.
# 
class AuthOptions
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CLIENTNAME = 1
  CLIENTVERSION = 2
  SUPPORTEDPROTOCOLVERSIONS = 3
  SECRETTYPE = 4
  PARAMS = 5
  DOMAINHOSTNAME = 6

  FIELDS = {
    CLIENTNAME => {:type => ::Thrift::Types::STRING, :name => 'clientName'},
    CLIENTVERSION => {:type => ::Thrift::Types::STRING, :name => 'clientVersion'},
    SUPPORTEDPROTOCOLVERSIONS => {:type => ::Thrift::Types::SET, :name => 'supportedProtocolVersions', :element => {:type => ::Thrift::Types::I32}},
    SECRETTYPE => {:type => ::Thrift::Types::I32, :name => 'secretType', :enum_class => ::SecretType},
    PARAMS => {:type => ::Thrift::Types::MAP, :name => 'params', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    DOMAINHOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'domainHostname'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @secretType.nil? || ::SecretType::VALID_VALUES.include?(@secretType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field secretType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Auth result as a return type of the auth() method. Mainly server info and chosen protocol version.
# 
class AuthResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONNECTIONID = 1
  SERVERVERSION = 2
  PROTOCOLVERSION = 3
  PARAMS = 4

  FIELDS = {
    CONNECTIONID => {:type => ::Thrift::Types::STRING, :name => 'connectionId'},
    SERVERVERSION => {:type => ::Thrift::Types::STRING, :name => 'serverVersion'},
    PROTOCOLVERSION => {:type => ::Thrift::Types::I32, :name => 'protocolVersion'},
    PARAMS => {:type => ::Thrift::Types::MAP, :name => 'params', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# ResultSet specific metadata about one column
# 
class ResultSetMetaDataColumn
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTOINCREMENT = 2
  CASESENSITIVE = 3
  SEARCHABLE = 4
  CURRENCY = 5
  NULLABLE = 6
  SIGNED = 7
  COLUMNDISPLAYSIZE = 8
  COLUMNLABEL = 9
  COLUMNNAME = 10
  SCHEMANAME = 11
  PRECISION = 12
  SCALE = 13
  TABLENAME = 14
  CATALOGNAME = 15
  COLUMNTYPE = 16
  COLUMNTYPENAME = 17
  READONLY = 18
  WRITABLE = 19
  DEFINITELYWRITABLE = 20
  COLUMNCLASSNAME = 21

  FIELDS = {
    AUTOINCREMENT => {:type => ::Thrift::Types::BOOL, :name => 'autoIncrement'},
    CASESENSITIVE => {:type => ::Thrift::Types::BOOL, :name => 'caseSensitive'},
    SEARCHABLE => {:type => ::Thrift::Types::BOOL, :name => 'searchable'},
    CURRENCY => {:type => ::Thrift::Types::BOOL, :name => 'currency'},
    NULLABLE => {:type => ::Thrift::Types::I32, :name => 'nullable'},
    SIGNED => {:type => ::Thrift::Types::BOOL, :name => 'signed'},
    COLUMNDISPLAYSIZE => {:type => ::Thrift::Types::I32, :name => 'columnDisplaySize'},
    COLUMNLABEL => {:type => ::Thrift::Types::STRING, :name => 'columnLabel'},
    COLUMNNAME => {:type => ::Thrift::Types::STRING, :name => 'columnName'},
    SCHEMANAME => {:type => ::Thrift::Types::STRING, :name => 'schemaName'},
    PRECISION => {:type => ::Thrift::Types::I32, :name => 'precision'},
    SCALE => {:type => ::Thrift::Types::I32, :name => 'scale'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    CATALOGNAME => {:type => ::Thrift::Types::STRING, :name => 'catalogName'},
    COLUMNTYPE => {:type => ::Thrift::Types::I32, :name => 'columnType'},
    COLUMNTYPENAME => {:type => ::Thrift::Types::STRING, :name => 'columnTypeName'},
    READONLY => {:type => ::Thrift::Types::BOOL, :name => 'readOnly'},
    WRITABLE => {:type => ::Thrift::Types::BOOL, :name => 'writable'},
    DEFINITELYWRITABLE => {:type => ::Thrift::Types::BOOL, :name => 'definitelyWritable'},
    COLUMNCLASSNAME => {:type => ::Thrift::Types::STRING, :name => 'columnClassName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Result set metadata.
# 
# List [[columns]] contains information about all columns from given result set.
# 
class ResultSetMetaData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COLUMNS = 1

  FIELDS = {
    COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ResultSetMetaDataColumn}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Data structure used for transfering result-set-like connection metadata.
# <p/>
# Rows and columns are stored in <code>values</code> field and appended to each other without any length and/or type
# information. Client has to base its decoding algorithm on result-set's metadata that can be retrieved from
# <code>metadata</code> field.
# <p/>
# Each row is encoded into two parts. First <code>(columnCount + 7) / 8</code> bytes are used to transfer 1 bit for
# each column. Set bit indicates that column value is written after this initial block. Cleared bit indicates
# that there is no value transferred and column is null. Whether bit is set can be detected by
# <code>(bytes[n/8] & (1<<(n%8))) != 0</code> - for all 0 < n < columnCount
# <p>
# Column values for each set bit are appended after "header" bytes and are encoded using Thrift's binary protocol.
# 
class SimpleDataSetBinary
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VALUES = 1
  METADATA = 2

  FIELDS = {
    VALUES => {:type => ::Thrift::Types::STRING, :name => 'values', :binary => true},
    METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'metadata', :class => ::ResultSetMetaData}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CopyFileRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COPYFILEID = 1
  LOCALFILEPATH = 2

  FIELDS = {
    COPYFILEID => {:type => ::Thrift::Types::STRING, :name => 'copyFileId'},
    LOCALFILEPATH => {:type => ::Thrift::Types::STRING, :name => 'localFilePath'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Wrapper describing and identifying server side query execution.
# 
class ExecutionDescriptor
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXECUTIONID = 1
  UPLOADREQUESTS = 2
  DOWNLOADREQUESTS = 3

  FIELDS = {
    EXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'executionId'},
    UPLOADREQUESTS => {:type => ::Thrift::Types::LIST, :name => 'uploadRequests', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CopyFileRequest}},
    DOWNLOADREQUESTS => {:type => ::Thrift::Types::LIST, :name => 'downloadRequests', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CopyFileRequest}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# Wrapper for all possible results of sql execution.
# 
class ExecutionResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  UPDATEDCOUNT = 1
  RESULTSETID = 2

  FIELDS = {
    UPDATEDCOUNT => {:type => ::Thrift::Types::I32, :name => 'updatedCount'},
    RESULTSETID => {:type => ::Thrift::Types::STRING, :name => 'resultSetId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# All possible method parameters we want to pass through our protocol
# 
class MethodParameter < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def intValue(val)
      MethodParameter.new(:intValue, val)
    end

    def boolValue(val)
      MethodParameter.new(:boolValue, val)
    end

    def stringValue(val)
      MethodParameter.new(:stringValue, val)
    end

    def intArray(val)
      MethodParameter.new(:intArray, val)
    end

    def boolArray(val)
      MethodParameter.new(:boolArray, val)
    end

    def stringArray(val)
      MethodParameter.new(:stringArray, val)
    end

    def nullValue(val)
      MethodParameter.new(:nullValue, val)
    end
  end

  INTVALUE = 1
  BOOLVALUE = 2
  STRINGVALUE = 3
  INTARRAY = 4
  BOOLARRAY = 5
  STRINGARRAY = 6
  NULLVALUE = 7

  FIELDS = {
    INTVALUE => {:type => ::Thrift::Types::I32, :name => 'intValue', :optional => true},
    BOOLVALUE => {:type => ::Thrift::Types::BOOL, :name => 'boolValue', :optional => true},
    STRINGVALUE => {:type => ::Thrift::Types::STRING, :name => 'stringValue', :optional => true},
    INTARRAY => {:type => ::Thrift::Types::LIST, :name => 'intArray', :element => {:type => ::Thrift::Types::I32}, :optional => true},
    BOOLARRAY => {:type => ::Thrift::Types::LIST, :name => 'boolArray', :element => {:type => ::Thrift::Types::BOOL}, :optional => true},
    STRINGARRAY => {:type => ::Thrift::Types::LIST, :name => 'stringArray', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
    NULLVALUE => {:type => ::Thrift::Types::BOOL, :name => 'nullValue', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

