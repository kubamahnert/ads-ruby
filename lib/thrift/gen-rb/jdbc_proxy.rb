#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'datawarehouse-jdbc-bridge_types'

module JdbcProxy
  class Client
    include ::Thrift::Client

    def getVersion()
      send_getVersion()
      return recv_getVersion()
    end

    def send_getVersion()
      send_message('getVersion', GetVersion_args)
    end

    def recv_getVersion()
      result = receive_message(GetVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getVersion failed: unknown result')
    end

    def auth(instanceId, username, secret, opts)
      send_auth(instanceId, username, secret, opts)
      return recv_auth()
    end

    def send_auth(instanceId, username, secret, opts)
      send_message('auth', Auth_args, :instanceId => instanceId, :username => username, :secret => secret, :opts => opts)
    end

    def recv_auth()
      result = receive_message(Auth_result)
      return result.success unless result.success.nil?
      raise result.loginEx unless result.loginEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise result.clientEx unless result.clientEx.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auth failed: unknown result')
    end

    def close()
      send_close()
      recv_close()
    end

    def send_close()
      send_message('close', Close_args)
    end

    def recv_close()
      result = receive_message(Close_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def execute(sql, methodType)
      send_execute(sql, methodType)
      return recv_execute()
    end

    def send_execute(sql, methodType)
      send_message('execute', Execute_args, :sql => sql, :methodType => methodType)
    end

    def recv_execute()
      result = receive_message(Execute_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'execute failed: unknown result')
    end

    def initializeFileTransfer(copyFileId, hash, fileSize)
      send_initializeFileTransfer(copyFileId, hash, fileSize)
      recv_initializeFileTransfer()
    end

    def send_initializeFileTransfer(copyFileId, hash, fileSize)
      send_message('initializeFileTransfer', InitializeFileTransfer_args, :copyFileId => copyFileId, :hash => hash, :fileSize => fileSize)
    end

    def recv_initializeFileTransfer()
      result = receive_message(InitializeFileTransfer_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def sendFileFragment(copyFileId, fileFragment)
      send_sendFileFragment(copyFileId, fileFragment)
      recv_sendFileFragment()
    end

    def send_sendFileFragment(copyFileId, fileFragment)
      send_message('sendFileFragment', SendFileFragment_args, :copyFileId => copyFileId, :fileFragment => fileFragment)
    end

    def recv_sendFileFragment()
      result = receive_message(SendFileFragment_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def receiveFileFragment(copyFileId)
      send_receiveFileFragment(copyFileId)
      return recv_receiveFileFragment()
    end

    def send_receiveFileFragment(copyFileId)
      send_message('receiveFileFragment', ReceiveFileFragment_args, :copyFileId => copyFileId)
    end

    def recv_receiveFileFragment()
      result = receive_message(ReceiveFileFragment_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'receiveFileFragment failed: unknown result')
    end

    def getNextExecutionResult(executionId)
      send_getNextExecutionResult(executionId)
      return recv_getNextExecutionResult()
    end

    def send_getNextExecutionResult(executionId)
      send_message('getNextExecutionResult', GetNextExecutionResult_args, :executionId => executionId)
    end

    def recv_getNextExecutionResult()
      result = receive_message(GetNextExecutionResult_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNextExecutionResult failed: unknown result')
    end

    def queryResultSetBinary(resultSetId)
      send_queryResultSetBinary(resultSetId)
      return recv_queryResultSetBinary()
    end

    def send_queryResultSetBinary(resultSetId)
      send_message('queryResultSetBinary', QueryResultSetBinary_args, :resultSetId => resultSetId)
    end

    def recv_queryResultSetBinary()
      result = receive_message(QueryResultSetBinary_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'queryResultSetBinary failed: unknown result')
    end

    def closeResource(id, resourceType)
      send_closeResource(id, resourceType)
      recv_closeResource()
    end

    def send_closeResource(id, resourceType)
      send_message('closeResource', CloseResource_args, :id => id, :resourceType => resourceType)
    end

    def recv_closeResource()
      result = receive_message(CloseResource_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def commit()
      send_commit()
      recv_commit()
    end

    def send_commit()
      send_message('commit', Commit_args)
    end

    def recv_commit()
      result = receive_message(Commit_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def rollback()
      send_rollback()
      recv_rollback()
    end

    def send_rollback()
      send_message('rollback', Rollback_args)
    end

    def recv_rollback()
      result = receive_message(Rollback_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def setConnectionParameter(param, value)
      send_setConnectionParameter(param, value)
      recv_setConnectionParameter()
    end

    def send_setConnectionParameter(param, value)
      send_message('setConnectionParameter', SetConnectionParameter_args, :param => param, :value => value)
    end

    def recv_setConnectionParameter()
      result = receive_message(SetConnectionParameter_result)
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      return
    end

    def getConnectionParameter(param)
      send_getConnectionParameter(param)
      return recv_getConnectionParameter()
    end

    def send_getConnectionParameter(param)
      send_message('getConnectionParameter', GetConnectionParameter_args, :param => param)
    end

    def recv_getConnectionParameter()
      result = receive_message(GetConnectionParameter_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getConnectionParameter failed: unknown result')
    end

    def getResultSetMetadata(resultSetId)
      send_getResultSetMetadata(resultSetId)
      return recv_getResultSetMetadata()
    end

    def send_getResultSetMetadata(resultSetId)
      send_message('getResultSetMetadata', GetResultSetMetadata_args, :resultSetId => resultSetId)
    end

    def recv_getResultSetMetadata()
      result = receive_message(GetResultSetMetadata_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getResultSetMetadata failed: unknown result')
    end

    def getConnectionMetadataSimple(method, params)
      send_getConnectionMetadataSimple(method, params)
      return recv_getConnectionMetadataSimple()
    end

    def send_getConnectionMetadataSimple(method, params)
      send_message('getConnectionMetadataSimple', GetConnectionMetadataSimple_args, :method => method, :params => params)
    end

    def recv_getConnectionMetadataSimple()
      result = receive_message(GetConnectionMetadataSimple_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getConnectionMetadataSimple failed: unknown result')
    end

    def getConnectionMetadataResultSetBinary(method, params)
      send_getConnectionMetadataResultSetBinary(method, params)
      return recv_getConnectionMetadataResultSetBinary()
    end

    def send_getConnectionMetadataResultSetBinary(method, params)
      send_message('getConnectionMetadataResultSetBinary', GetConnectionMetadataResultSetBinary_args, :method => method, :params => params)
    end

    def recv_getConnectionMetadataResultSetBinary()
      result = receive_message(GetConnectionMetadataResultSetBinary_result)
      return result.success unless result.success.nil?
      raise result.proxyEx unless result.proxyEx.nil?
      raise result.sqlException unless result.sqlException.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getConnectionMetadataResultSetBinary failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetVersion_args)
      result = GetVersion_result.new()
      result.success = @handler.getVersion()
      write_result(result, oprot, 'getVersion', seqid)
    end

    def process_auth(seqid, iprot, oprot)
      args = read_args(iprot, Auth_args)
      result = Auth_result.new()
      begin
        result.success = @handler.auth(args.instanceId, args.username, args.secret, args.opts)
      rescue ::ProxyException => loginEx
        result.loginEx = loginEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      rescue ::UnsupportedClientException => clientEx
        result.clientEx = clientEx
      end
      write_result(result, oprot, 'auth', seqid)
    end

    def process_close(seqid, iprot, oprot)
      args = read_args(iprot, Close_args)
      result = Close_result.new()
      begin
        @handler.close()
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'close', seqid)
    end

    def process_execute(seqid, iprot, oprot)
      args = read_args(iprot, Execute_args)
      result = Execute_result.new()
      begin
        result.success = @handler.execute(args.sql, args.methodType)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'execute', seqid)
    end

    def process_initializeFileTransfer(seqid, iprot, oprot)
      args = read_args(iprot, InitializeFileTransfer_args)
      result = InitializeFileTransfer_result.new()
      begin
        @handler.initializeFileTransfer(args.copyFileId, args.hash, args.fileSize)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'initializeFileTransfer', seqid)
    end

    def process_sendFileFragment(seqid, iprot, oprot)
      args = read_args(iprot, SendFileFragment_args)
      result = SendFileFragment_result.new()
      begin
        @handler.sendFileFragment(args.copyFileId, args.fileFragment)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'sendFileFragment', seqid)
    end

    def process_receiveFileFragment(seqid, iprot, oprot)
      args = read_args(iprot, ReceiveFileFragment_args)
      result = ReceiveFileFragment_result.new()
      begin
        result.success = @handler.receiveFileFragment(args.copyFileId)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'receiveFileFragment', seqid)
    end

    def process_getNextExecutionResult(seqid, iprot, oprot)
      args = read_args(iprot, GetNextExecutionResult_args)
      result = GetNextExecutionResult_result.new()
      begin
        result.success = @handler.getNextExecutionResult(args.executionId)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'getNextExecutionResult', seqid)
    end

    def process_queryResultSetBinary(seqid, iprot, oprot)
      args = read_args(iprot, QueryResultSetBinary_args)
      result = QueryResultSetBinary_result.new()
      begin
        result.success = @handler.queryResultSetBinary(args.resultSetId)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'queryResultSetBinary', seqid)
    end

    def process_closeResource(seqid, iprot, oprot)
      args = read_args(iprot, CloseResource_args)
      result = CloseResource_result.new()
      begin
        @handler.closeResource(args.id, args.resourceType)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'closeResource', seqid)
    end

    def process_commit(seqid, iprot, oprot)
      args = read_args(iprot, Commit_args)
      result = Commit_result.new()
      begin
        @handler.commit()
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'commit', seqid)
    end

    def process_rollback(seqid, iprot, oprot)
      args = read_args(iprot, Rollback_args)
      result = Rollback_result.new()
      begin
        @handler.rollback()
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'rollback', seqid)
    end

    def process_setConnectionParameter(seqid, iprot, oprot)
      args = read_args(iprot, SetConnectionParameter_args)
      result = SetConnectionParameter_result.new()
      begin
        @handler.setConnectionParameter(args.param, args.value)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'setConnectionParameter', seqid)
    end

    def process_getConnectionParameter(seqid, iprot, oprot)
      args = read_args(iprot, GetConnectionParameter_args)
      result = GetConnectionParameter_result.new()
      begin
        result.success = @handler.getConnectionParameter(args.param)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'getConnectionParameter', seqid)
    end

    def process_getResultSetMetadata(seqid, iprot, oprot)
      args = read_args(iprot, GetResultSetMetadata_args)
      result = GetResultSetMetadata_result.new()
      begin
        result.success = @handler.getResultSetMetadata(args.resultSetId)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'getResultSetMetadata', seqid)
    end

    def process_getConnectionMetadataSimple(seqid, iprot, oprot)
      args = read_args(iprot, GetConnectionMetadataSimple_args)
      result = GetConnectionMetadataSimple_result.new()
      begin
        result.success = @handler.getConnectionMetadataSimple(args.method, args.params)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'getConnectionMetadataSimple', seqid)
    end

    def process_getConnectionMetadataResultSetBinary(seqid, iprot, oprot)
      args = read_args(iprot, GetConnectionMetadataResultSetBinary_args)
      result = GetConnectionMetadataResultSetBinary_result.new()
      begin
        result.success = @handler.getConnectionMetadataResultSetBinary(args.method, args.params)
      rescue ::ProxyException => proxyEx
        result.proxyEx = proxyEx
      rescue ::ProxySqlException => sqlException
        result.sqlException = sqlException
      end
      write_result(result, oprot, 'getConnectionMetadataResultSetBinary', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Auth_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INSTANCEID = 1
    USERNAME = 2
    SECRET = 3
    OPTS = 4

    FIELDS = {
      INSTANCEID => {:type => ::Thrift::Types::STRING, :name => 'instanceId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'},
      OPTS => {:type => ::Thrift::Types::STRUCT, :name => 'opts', :class => ::AuthOptions}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Auth_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    LOGINEX = 1
    SQLEXCEPTION = 2
    CLIENTEX = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AuthResult},
      LOGINEX => {:type => ::Thrift::Types::STRUCT, :name => 'loginEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException},
      CLIENTEX => {:type => ::Thrift::Types::STRUCT, :name => 'clientEx', :class => ::UnsupportedClientException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Execute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SQL = 1
    METHODTYPE = 2

    FIELDS = {
      SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'},
      METHODTYPE => {:type => ::Thrift::Types::I32, :name => 'methodType', :enum_class => ::ExecuteMethodType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @methodType.nil? || ::ExecuteMethodType::VALID_VALUES.include?(@methodType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field methodType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Execute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExecutionDescriptor},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InitializeFileTransfer_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COPYFILEID = 1
    HASH = 2
    FILESIZE = 3

    FIELDS = {
      COPYFILEID => {:type => ::Thrift::Types::STRING, :name => 'copyFileId'},
      HASH => {:type => ::Thrift::Types::STRING, :name => 'hash'},
      FILESIZE => {:type => ::Thrift::Types::I64, :name => 'fileSize'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InitializeFileTransfer_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendFileFragment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COPYFILEID = 1
    FILEFRAGMENT = 2

    FIELDS = {
      COPYFILEID => {:type => ::Thrift::Types::STRING, :name => 'copyFileId'},
      FILEFRAGMENT => {:type => ::Thrift::Types::STRING, :name => 'fileFragment', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendFileFragment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReceiveFileFragment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COPYFILEID = 1

    FIELDS = {
      COPYFILEID => {:type => ::Thrift::Types::STRING, :name => 'copyFileId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReceiveFileFragment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextExecutionResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EXECUTIONID = 1

    FIELDS = {
      EXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'executionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNextExecutionResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExecutionResult},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QueryResultSetBinary_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RESULTSETID = 1

    FIELDS = {
      RESULTSETID => {:type => ::Thrift::Types::STRING, :name => 'resultSetId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QueryResultSetBinary_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    RESOURCETYPE = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      RESOURCETYPE => {:type => ::Thrift::Types::I32, :name => 'resourceType', :enum_class => ::ResourceType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @resourceType.nil? || ::ResourceType::VALID_VALUES.include?(@resourceType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field resourceType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Commit_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Commit_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rollback_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rollback_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetConnectionParameter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PARAM = 1
    VALUE = 2

    FIELDS = {
      PARAM => {:type => ::Thrift::Types::I32, :name => 'param', :enum_class => ::ConnectionParameter},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::MethodParameter}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @param.nil? || ::ConnectionParameter::VALID_VALUES.include?(@param)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field param!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetConnectionParameter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionParameter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PARAM = 1

    FIELDS = {
      PARAM => {:type => ::Thrift::Types::I32, :name => 'param', :enum_class => ::ConnectionParameter}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @param.nil? || ::ConnectionParameter::VALID_VALUES.include?(@param)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field param!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionParameter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MethodParameter},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResultSetMetadata_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RESULTSETID = 1

    FIELDS = {
      RESULTSETID => {:type => ::Thrift::Types::STRING, :name => 'resultSetId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResultSetMetadata_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ResultSetMetaData},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionMetadataSimple_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    METHOD = 1
    PARAMS = 2

    FIELDS = {
      METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::MetadataSimpleMethod},
      PARAMS => {:type => ::Thrift::Types::LIST, :name => 'params', :element => {:type => ::Thrift::Types::STRUCT, :class => ::MethodParameter}}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @method.nil? || ::MetadataSimpleMethod::VALID_VALUES.include?(@method)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionMetadataSimple_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionMetadataResultSetBinary_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    METHOD = 1
    PARAMS = 2

    FIELDS = {
      METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::MetadataResultSetMethod},
      PARAMS => {:type => ::Thrift::Types::LIST, :name => 'params', :element => {:type => ::Thrift::Types::STRUCT, :class => ::MethodParameter}}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @method.nil? || ::MetadataResultSetMethod::VALID_VALUES.include?(@method)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConnectionMetadataResultSetBinary_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    PROXYEX = 1
    SQLEXCEPTION = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SimpleDataSetBinary},
      PROXYEX => {:type => ::Thrift::Types::STRUCT, :name => 'proxyEx', :class => ::ProxyException},
      SQLEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'sqlException', :class => ::ProxySqlException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end
